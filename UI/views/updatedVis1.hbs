<head>
    <style>
        rect.bordered {
            stroke: #E6E6E6;
            stroke-width: 2px;
        }

        text.mono {
            font-size: 9pt;
            font-family: Consolas, courier;
            fill: #aaa;
        }

        text.axis-workweek {
            fill: #000;
        }

        text.axis-worktime {
            fill: #000;
        }
    </style>
    <script src="http://d3js.org/d3.v3.js"></script>
</head>

<h2>Vis1</h2>
<button data-target="#bs-dialog" data-toggle="modal" class="btn pmd-btn-fab pmd-ripple-effect btn-default pull-right" type="button">
    <i class="material-icons md-dark pmd-sm">help_outline</i>
</button>
<div tabindex="-1" class="modal fade" id="bs-dialog" style="display: none;" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">
                <p>Info about vis1</p>
            </div>
        </div>
    </div>
</div>
<div class="col-md-9">
<div class="pmd-card pmd-z-depth pmd-card-custom-form">
    <div class="pmd-card-body">
        <div class="form-group pmd-textfield pmd-textfield-floating-label">
            <label>Select a station</label>
            <select id="options" class="select-with-search pmd-select2 form-control">
                {{#each stations}}
                <option>{{this}}
                </option>
                {{/each}}
            </select>
        </div>
    </div>
</div>
</div>



<div class="col-md-12 col-sm-12">
    <h3 class="text-muted"></h3>
    <div class="pmd-card pmd-card-default pmd-z-depth">
        <div class="pmd-card-body">
            <div class="media-body">
                <div id="chart"></div>
                <div id="dataset-picker"></div>
                <script type="text/javascript">
                    var margin = { top: 50, right: 0, bottom: 100, left: 30 },
                        width = 850 - margin.left - margin.right,
                        height = 430 - margin.top - margin.bottom,
                        gridSize = Math.floor(width / 24),
                        legendElementWidth = gridSize * 2,
                        buckets = 9,
                        colors = ["#ffffd9", "#edf8b1", "#c7e9b4", "#7fcdbb", "#41b6c4", "#1d91c0", "#225ea8", "#253494", "#081d58"], // alternatively colorbrewer.YlGnBu[9]
                        days = ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
                        times = ["1am", "2am", "3am", "4am", "5am", "6am", "7am", "8am", "9am", "10am", "11am", "12am", "1pm", "2pm", "3pm", "4pm", "5pm", "6pm", "7pm", "8pm", "9pm", "10pm", "11pm", "12pm"];
                    datasets = ["\u05d3\u05d9\u05d6\u05e0\u05d2\u05d5\u05e3/\u05d2\u05d5\u05e8\u05d3\u05d5\u05df", "\u05d3\u05d9\u05d6\u05e0\u05d2\u05d5\u05e3/\u05e9\u05d3' \u05d1\u05df \u05d2\u05d5\u05e8\u05d9\u05d5\u05df", "\u05e9\u05d3' \u05d1\u05df \u05d2\u05d5\u05e8\u05d9\u05d5\u05df/\u05d3\u05d9\u05d6\u05e0\u05d2\u05d5\u05e3", "\u05e8\u05d9\u05d9\u05e0\u05e1/\u05d2\u05d5\u05e8\u05d3\u05d5\u05df"];

                    var svg = d3.select("#chart").append("svg")
                        .attr("width", width + margin.left + margin.right)
                        .attr("height", height + margin.top + margin.bottom)
                        .append("g")
                        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

                    var dayLabels = svg.selectAll(".dayLabel")
                        .data(days)
                        .enter().append("text")
                        .text(function (d) { return d; })
                        .attr("x", 0)
                        .attr("y", function (d, i) { return i * gridSize; })
                        .style("text-anchor", "end")
                        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "dayLabel mono axis axis-workweek" : "dayLabel mono axis"); });

                    var timeLabels = svg.selectAll(".timeLabel")
                        .data(times)
                        .enter().append("text")
                        .text(function (d) { return d; })
                        .attr("x", function (d, i) { return i * gridSize; })
                        .attr("y", 0)
                        .style("text-anchor", "middle")
                        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
                        .attr("class", function (d, i) { return ((i >= 7 && i <= 16) ? "timeLabel mono axis axis-worktime" : "timeLabel mono axis"); });

                    var heatmapChart = function (station) {
                        d3.json("mock_data/data_ziv.json",
                            function (jsonData) {
                                let d = jsonData.data;
                                d = d.stops;
                                let data = [];
                                let id = -1;
                                let i = 0;
                                let found = false;
                                while (found === false) {
                                    if (d[i].stop_name === station) {
                                        id = i;
                                        found = true;
                                    }
                                    i++;
                                }
                                let stationObj = d[id];
                                for (let i = 0; i < 7; i++) {
                                    for (let j = 0; j < 24; j++) {
                                        let val = {};
                                        val.day = i + 1;
                                        val.hour = j + 1;
                                        val.value = stationObj.rides[i][j];
                                        data.push(val);
                                    }
                                }

                                var colorScale = d3.scale.quantile()
                                    .domain([0, buckets - 1, d3.max(data, function (d) { return d.value; })])
                                    .range(colors);

                                var cards = svg.selectAll(".hour")
                                    .data(data, function (d) { return d.day + ':' + d.hour; });

                                cards.append("title");

                                cards.enter().append("rect")
                                    .attr("x", function (d) { return (d.hour - 1) * gridSize; })
                                    .attr("y", function (d) { return (d.day - 1) * gridSize; })
                                    .attr("rx", 4)
                                    .attr("ry", 4)
                                    .attr("class", "hour bordered")
                                    .attr("width", gridSize)
                                    .attr("height", gridSize)
                                    .style("fill", colors[0]);

                                cards.transition().duration(1000)
                                    .style("fill", function (d) { return colorScale(d.value); });

                                cards.select("title").text(function (d) { return d.value; });

                                cards.exit().remove();

                                var legend = svg.selectAll(".legend")
                                    .data([0].concat(colorScale.quantiles()), function (d) { return d; });

                                legend.enter().append("g")
                                    .attr("class", "legend");

                                legend.append("rect")
                                    .attr("x", function (d, i) { return legendElementWidth * i; })
                                    .attr("y", height)
                                    .attr("width", legendElementWidth)
                                    .attr("height", gridSize / 2)
                                    .style("fill", function (d, i) { return colors[i]; });

                                legend.append("text")
                                    .attr("class", "mono")
                                    .text(function (d) { return "â‰¥ " + Math.round(d); })
                                    .attr("x", function (d, i) { return legendElementWidth * i; })
                                    .attr("y", height + gridSize);

                                legend.exit().remove();
                            })
                    };

                    heatmapChart(datasets[0], 1);


                    function changeFunc() {
                        var selectBox = document.getElementById("options");
                        var selectedValue = selectBox.options[selectBox.selectedIndex].value;
                        heatmapChart(selectedValue);
                    }
                    var _options = document.getElementById("options").onchange = changeFunc

                </script>
            </div>
        </div>
    </div>
</div>