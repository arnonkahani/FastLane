<head>
	<style>
		text {
			font: 10px sans-serif;
		}

		.axis path {
			display: none;
		}

		.axis line {
			fill: none;
			stroke: #000;
			shape-rendering: crispEdges;
		}

		.group-label {
			font-weight: bold;
			text-anchor: end;
		}

		form {
			position: absolute;
			right: 10px;
			top: 10px;
		}

		.d3-tip {
			line-height: 1;
			font-size: 10px;
			font-weight: bold;
			padding: 8px;
			background: rgba(0, 0, 0, 0.8);
			color: #fff;
			border-radius: 1px;
		}

		.d3-tip:after {
			box-sizing: border-box;
			display: inline;
			font-size: 8px;
			width: 100%;
			line-height: 0.5;
			color: rgba(0, 0, 0, 0.8);
			content: "\25BC";
			position: absolute;
			text-align: center;
		}

		.d3-tip.n:after {
			margin: 0 0 0 0;
			top: 100%;
			left: 0;
		}

		select,
		input[type="text"] {
			width: 160px;
			box-sizing: border-box;
		}

		section {
			padding: 8px;
			background-color: #f0f0f0;
			overflow: auto;

		}

		section>div {
			float: left;
			padding: 8px;
		}

		section>div+div {
			width: 40px;
			text-align: center;
		}

		.stackedBarChart {
			position: absolute;
			top: 50px;
			margin-top: 10px;
		}

		#sendData {
			margin-top: 9px;
		}

		#create {
			margin-top: 15px;
			margin-left: -34px;
		}
		#mapid {
            min-height: 100%;
            height: 50vh;
            width: 50vw;
            z-index: 0
        }
	</style>
	 <link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css"
          integrity="sha512-Rksm5RenBEKSKFjgI3a41vrjkw4EVPlJ3+OiI65vTjIdo9brlAacEuKOiQ5OFh7cOI1bkDwLqdLw3Zg0cRJAAQ=="
          crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"
            integrity="sha512-/Nsx9X4HebavoBvEBuyp3I7od5tA0UzAxs+j83KgC8PU0kgB4XiK4Lfe4y4cgBtaRJQEIFCW+oC506aPT2L1zw=="
            crossorigin=""></script>
</head>


<h1 align="center" style="font-family: 'Cabin Sketch', cursive;">COMPARISON STATIONS</h1>
<button data-target="#bs-dialog" data-toggle="modal" class="btn pmd-btn-fab pmd-ripple-effect btn-default pull-right" type="button">
	<i class="material-icons md-dark pmd-sm">help_outline</i>
</button>
<div tabindex="-1" class="modal fade" id="bs-dialog" style="display: none;" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-body">
				<p>Info about vis2</p>
			</div>
		</div>
	</div>
</div>
	<div class="col-md-8 col-sm-6">
				<h3 class="text-muted">Mark two points on the map below</h3>
				<div class="pmd-card pmd-card-default pmd-z-depth">
					<div class="pmd-card-body">
						<div class="media-body">
								<a href="javascript:void(0);">
									<div id="mapid"></div>
								</a>
							</div>
							<div class="media-right">
								<button id="send_data" type="button" class="btn btn-sm pmd-btn-fab pmd-btn-flat pmd-ripple-effect btn-primary"><i class="material-icons pmd-sm">send</i></button>
								<button id="clear_data" type="button" class="btn btn-sm pmd-btn-fab pmd-btn-flat pmd-ripple-effect btn-primary"><i class="material-icons pmd-sm">clear</i></button>
							</div>
					</div>
				</div>
			</div>
<script>

	var mymap = L.map('mapid').setView([31.806400, 35.188504], 12);
    var points = [];
	var markersArray = [];
	L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw', {
		maxZoom: 18,
		attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
			'<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
			'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
		id: 'mapbox.streets'
	}).addTo(mymap);

    function addStationsToSelection(stations) {
        var x = document.getElementById("options");
        stations.forEach(function(station) {
            var option = document.createElement("option");
            option.text = station;
            x.add(option);
        })
    
    }
    function onClickSendData(e){
        axios.post('/vis_data', points).then(function (response) {
            stations_view = response.data.data.stops.map(x => x.stop_name)
            data_viz = response.data
            stations =stations_view
            addStationsToSelection(stations)
            uploud_viz(stations,data_viz)
        })
    }
	
    document.getElementById('send_data').onclick = onClickSendData
	document.getElementById('clear_data').onclick = onClickClearData
    var markerGroup = L.layerGroup().addTo(mymap);
	function onMapClick(e) {
        if (points.length < 2) {
            points.push([e.latlng.lat, e.latlng.lng]);
            var marker = L.marker([e.latlng.lat, e.latlng.lng]).addTo(markerGroup);
			
        }
        else alert("You have already choose 2 points");
}

function onClickClearData(e){
		points = [];
	markerGroup.clearLayers();
	}

mymap.on('click', onMapClick);
</script>
<div class="col-md-9">
	<div class="component-box">
		<div class="row">
			<div class="col-md-12">
				<div class="pmd-card pmd-z-depth">
					<div class="pmd-card-body">
						<label class="radio-inline pmd-radio">
							<input type="radio" name="inlineRadioOptions" id="inlineRadio1" value="option1">
							<span for="inlineRadio1">Stacked</span>
						</label>
						<label class="radio-inline pmd-radio">
							<input type="radio" name="inlineRadioOptions" id="inlineRadio2" value="option2" checked>
							<span for="inlineRadio2">Multiples</span>
						</label>
					</div>
				</div>
			</div>
		</div>
		<div class="row toggle-button-custom">
			<div class="col-md-12">
				<div class="pmd-card pmd-z-depth pmd-card-custom-form">
					<div class="pmd-card-body">
						<div class="form-group pmd-textfield pmd-textfield-floating-label">
							<label>Select stations</label>
							<select id="options" class="form-control select-tags pmd-select2-tags" multiple>
								{{!-- {{#each stations}}
								<option>{{this}}
								</option>
								{{/each}} --}}
							</select>
						</div>


						<div class="media-body">
							<button class="btn btn-sm pmd-btn-raised pmd-ripple-effect btn-primary" id="sendData" type="button">Show Visualization</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>


<div class="col-md-12 col-sm-12">
	<h3 class="text-muted"></h3>
	<div class="pmd-card pmd-card-default pmd-z-depth" id="viz2-body">
		<div class="pmd-card-body">
			<div class="media-body" id="viz2">

				<script src="http://d3js.org/d3.v3.min.js"></script>
				<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
				<script src="assets/js/jquery-1.12.2.min.js"></script>
				<script src="analytics.js"></script>
				<script src="html2canvas.min.js"></script>
				<script>
window.analytics_handlers.log_movment(document,{{{json uuid}}})
function uploud_viz(stations,data_viz){

					$("#sendData").click(function () {
						let vizElement = document.getElementById("vis2-svg")
						if (vizElement) {
							vizElement.parentNode.removeChild(vizElement);
						}
						var listItems = Array.from(document.getElementsByClassName('select2-selection__choice')),
							parsedList = listItems.map(x => x.title.trim())

						loadData(parsedList, createBarChart);

					});
					clickWrapper(document.getElementById("sendData"))


					function loadData(selectedItems, callback) {
						console.log(selectedItems)
						var len = (selectedItems.length) * 6;

						data = data_viz
							var parsedData = new Array();
							data.data.stops.forEach(function (d) {

								var value1 = 0, value2 = 0, value3 = 0, value4 = 0, value5 = 0, value6 = 0;
								if (selectedItems.includes(d.stop_name)) {

									d.rides.forEach(function (day) {

										value1 += day[0] + day[1] + day[2] + day[3] + day[4] + day[5];
										value2 += day[6] + day[7] + day[8] + day[9];
										value3 += day[10] + day[11] + day[12] + day[13];
										value4 += day[14] + day[15] + day[16] + day[17];
										value5 += day[18] + day[19] + day[20];
										value6 += day[21] + day[22] + day[23];
									});
									var element1 = {
										group: 1,
										name: d.stop_name,
										value: Math.round(value1 / 7)
									}
									var element2 = {
										group: 2,
										name: d.stop_name,
										value: Math.round(value2 / 7)
									}
									var element3 = {
										group: 3,
										name: d.stop_name,
										value: Math.round(value3 / 7)
									}
									var element4 = {
										group: 4,
										name: d.stop_name,
										value: Math.round(value4 / 7)
									}
									var element5 = {
										group: 5,
										name: d.stop_name,
										value: Math.round(value5 / 7)
									}
									var element6 = {
										group: 6,
										name: d.stop_name,
										value: Math.round(value6 / 7)
									}
									parsedData.push(element1);
									parsedData.push(element2);
									parsedData.push(element3);
									parsedData.push(element4);
									parsedData.push(element5);
									parsedData.push(element6);
								}
							});
							console.log(parsedData)
							callback(parsedData)


					}

					function createBarChart(parsedData) {

						let elementWidth = parseInt(window.getComputedStyle(document.getElementById("viz2-body"), null).width);
						elementWidth = Math.min(elementWidth * (parsedData.length / 24), elementWidth)

						var margin = { top: 10, right: 20, bottom: 20, left: 60 },
							width = elementWidth - margin.left - margin.right,
							height = 500 - margin.top - margin.bottom;
						var y0 = d3.scale.ordinal()
							.rangeRoundBands([height, 0], .2);

						var y1 = d3.scale.linear();

						var x = d3.scale.ordinal()
							.rangeRoundBands([0, width], .1, 0);

						var xAxis = d3.svg.axis()
							.scale(x)
							.orient("bottom")
							.tickFormat(function (d) { return d });

						var tip = d3.tip()
							.attr('class', 'd3-tip')
							.offset([-8, -70])

						var nest = d3.nest()
							.key(function (d) { return d.group; });

						var stack = d3.layout.stack()
							.values(function (d) { return d.values; })
							.x(function (d) { return d.name; })
							.y(function (d) { return d.value; })
							.out(function (d, y0) { d.valueOffset = y0; });

						var colors = ["rgb(204, 235, 255)", "rgb(128, 204, 255)", "rgb(26, 163, 255)", "rgb(0, 122, 204)", "rgb(0, 92, 153)", "rgb(0, 61, 102)"];
						var hours = ["00:00-06:00", "06:00-10:00", "10:00-14:00", "14:00-18:00", "18:00-21:00", "21:00-00:00"];

						var svg = d3.select("#viz2").append("svg")
							.attr("width", width)
							.attr("id", "vis2-svg")
							.attr("height", height + margin.top + margin.bottom)
							.append("g")
							.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

						svg.call(tip);

						parsedData.forEach(function (d) {
							d.value = +d.value;
						});

						var dataByGroup = nest.entries(parsedData);
						stack(dataByGroup);
						x.domain(dataByGroup[0].values.map(function (d) { return d.name }));
						y0.domain(dataByGroup.map(function (d) { return d.key; }));
						y1.domain([0, d3.max(parsedData, function (d) { return d.value; })]).range([y0.rangeBand(), 0]);

						var group = svg.selectAll(".group")
							.data(dataByGroup)
							.enter().append("g")
							.attr("class", "group")
							.attr("transform", function (d) { return "translate(0," + y0(d.key) + ")"; });

						group.append("text")
							.attr("class", "group-label")
							.attr("x", -6)
							.attr("y", function (d) { return y1(d.values[0].value / 2); })
							.attr("dy", ".35em")
							.text(function (d) { return hours[d.key - 1]; });

						var rects = group.selectAll("rect")
							.data(function (d) { return d.values; })
							.enter().append("rect")
							.style("fill", function (d) { return colors[d.group - 1]; })
							.attr("x", function (d) { return x(d.name); })
							.attr("y", function (d) { return y1(d.value); })
							.attr("width", x.rangeBand())
							.attr("height", function (d) { return y0.rangeBand() - y1(d.value); })
							.on('mouseover', tip.show)
							.on('mouseout', tip.hide);

						group.filter(function (d, i) { return !i; }).append("g")
							.attr("class", "x axis")
							.attr("transform", "translate(0," + y0.rangeBand() + ")")
							.call(xAxis);

						d3.selectAll("input").on("change", change);

						var timeout = setTimeout(function () {
							d3.select("input[value=\"stacked\"]").property("checked", true).each(change);
						}, 2000);

						function change() {
							clearTimeout(timeout); console.log(this.value);
							if (this.value === "option2") transitionMultiples();
							else transitionStacked();
						}

						function transitionMultiples() {
							var t = svg.transition().duration(750),
								g = t.selectAll(".group").attr("transform", function (d) { return "translate(0," + y0(d.key) + ")"; });
							g.selectAll("rect").attr("y", function (d) { return y1(d.value); });
							g.select(".group-label").attr("y", function (d) { return y1(d.values[0].value / 2); })
							tip.html(function (d) {
								return "<strong style='color:white'>Number of trips:</strong> <span style='color:white'>" + d.value + "</span>";
							});
						}

						function transitionStacked() {
							var t = svg.transition().duration(750),
								g = t.selectAll(".group").attr("transform", "translate(0," + y0(y0.domain()[0]) + ")");
							g.selectAll("rect").attr("y", function (d) { return y1(d.value + d.valueOffset); });
							g.select(".group-label").attr("y", function (d) { return y1(d.values[0].value / 2 + d.values[0].valueOffset); })
							tip.html(function (d) {
								return "<span style='color:white'>" + d.value + "</span>";
							});
						}

						tip.html(function (d) {
							return "<span style='color:white'>" + d.value + "</span>";
						});
					}
}
				</script>
			</div>
		</div>
	</div>
</div>