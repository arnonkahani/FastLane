<!DOCTYPE html>
<meta charset="utf-8">
<style>

text {
  font: 10px sans-serif;
}

.axis path {
  display: none;
}

.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.group-label {
  font-weight: bold;
  text-anchor: end;
}

form {
  position: absolute;
  right: 10px;
  top: 10px;
}

.d3-tip {
  line-height: 1;
  font-size: 10px;
  font-weight: bold;
  padding: 8px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 1px;
}

.d3-tip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 8px;
  width: 100%;
  line-height: 0.5;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: absolute;
  text-align: center;
}

.d3-tip.n:after {
  margin: 0 0 0 0;
  top: 100%;
  left: 0;
}

select, input[type="text"] {
    width: 160px;
    box-sizing: border-box;
}
section {
    padding: 8px;
    background-color: #f0f0f0;
    overflow: auto;

}
section > div {
    float: left;
    padding: 8px;
}
section > div + div {
    width: 40px;
    text-align: center;
}

.stackedBarChart{
    position: absolute;
    top: 50px;
    margin-top: 10px;
}

#sendData{
    margin-top: 9px;
}

#create{
    margin-top: 15px;
    margin-left: -34px;
}

</style>
<form>
  <label><input type="radio" name="mode" value="multiples" checked> Multiples</label>
  <label><input type="radio" name="mode" value="stacked"> Stacked</label>
</form>
<section class="container">
    <div>
        <select id="leftValues" size="5" multiple></select>
    </div>
    <div>
        <input type="button" id="btnLeft" value="&lt;&lt;" />
        <input type="button" id="btnRight" value="&gt;&gt;" />
        <input type="button" id="sendData" value="OK" />
        <input type="button" id="create" value="Show Bar Chart" />
    </div>
    <div>
        <select id="rightValues" size="5" multiple></select>
    </div>
</section>
<section class="stackedBarChart">
<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="http://labratrevenge.com/d3-tip/javascripts/d3.tip.v0.6.3.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>

var stations = new Array();
var parsedData = new Array();
var i=0;
d3.json("mock_data/data_einav.json", function(error, data) {
  data.data.stops.forEach(function(d) {
    if (!stations.includes(d.stop_name)){
        stations[i] = d.stop_name;
        i++;
    } 
    });

    stations.forEach(function(d){ 
    var element = document.getElementById("rightValues");
    var para = document.createElement("option");
    var node = document.createTextNode(d);
    para.appendChild(node);
    element.appendChild(para);
});
});

$("#btnLeft").click(function () {
    var selectedItem = $("#rightValues option:selected");
    $("#leftValues").append(selectedItem);
});

$("#btnRight").click(function () {
    var selectedItem = $("#leftValues option:selected");
    $("#rightValues").append(selectedItem);
});

$("#sendData").click(function () {
    var selectedItems = new Array();
    var length = document.getElementById("leftValues").options.length;
    var listElement = document.getElementById("leftValues");
    for(i = 0; i < length; i++){
        selectedItems[i] = listElement[i].text;
    }
    loadData(selectedItems);
});

$("#create").click(function () {
    createBarChart();
});

function loadData(selectedItems){
    var len = (selectedItems.length)*6;
    d3.json("mock_data/data_einav.json", function(error, data) {
    data.data.stops.forEach(function(d) {
        var value1 = 0, value2 = 0, value3 = 0, value4 = 0, value5 = 0, value6 = 0;
        if (selectedItems.includes(d.stop_name)){
        d.rides.forEach(function(day){
            
            value1 += day[0]+day[1]+day[2]+day[3]+day[4]+day[5];
            value2 += day[6]+day[7]+day[8]+day[9];
            value3 += day[10]+day[11]+day[12]+day[13];
            value4 += day[14]+day[15]+day[16]+day[17];
            value5 += day[18]+day[19]+day[20];
            value6 += day[21]+day[22]+day[23];
        });
        var element1 = {
            group: 1,
            name: d.stop_name,
            value: Math.round(value1/7)
        }
        var element2 = {
            group: 2,
            name: d.stop_name,
            value: Math.round(value2/7)
        }
        var element3 = {
            group: 3,
            name: d.stop_name,
            value: Math.round(value3/7)
        }
        var element4 = {
            group: 4,
            name: d.stop_name,
            value: Math.round(value4/7)
        }
        var element5 = {
            group: 5,
            name: d.stop_name,
            value: Math.round(value5/7)
        }
        var element6 = {
            group: 6,
            name: d.stop_name,
            value: Math.round(value6/7)
        }
        parsedData.push(element1);
        parsedData.push(element2);
        parsedData.push(element3);
        parsedData.push(element4);
        parsedData.push(element5);
        parsedData.push(element6);
        }
    });
    });
}

function createBarChart(){
    var margin = {top: 10, right: 20, bottom: 20, left: 60},
        width = 960 - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    var y0 = d3.scale.ordinal()
        .rangeRoundBands([height, 0], .2);

    var y1 = d3.scale.linear();

    var x = d3.scale.ordinal()
        .rangeRoundBands([0, width], .1, 0);

    var xAxis = d3.svg.axis()
        .scale(x)
        .orient("bottom")
        .tickFormat(function(d){ return d});

    var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-8, -70])

    var nest = d3.nest()
        .key(function(d) { return d.group; });

    var stack = d3.layout.stack()
        .values(function(d) { return d.values; })
        .x(function(d) { return d.name; })
        .y(function(d) { return d.value; })
        .out(function(d, y0) { d.valueOffset = y0; });

    var colors = ["rgb(204, 235, 255)","rgb(128, 204, 255)","rgb(26, 163, 255)","rgb(0, 122, 204)","rgb(0, 92, 153)","rgb(0, 61, 102)"];
    var hours = ["00:00-06:00", "06:00-10:00", "10:00-14:00", "14:00-18:00","18:00-21:00","21:00-00:00"];

    var svg = d3.select("body").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

    svg.call(tip);

    parsedData.forEach(function(d) {
        d.value = +d.value;
    });

    var dataByGroup = nest.entries(parsedData);
    stack(dataByGroup);
    x.domain(dataByGroup[0].values.map(function(d) {return d.name }));
    y0.domain(dataByGroup.map(function(d) { return d.key; }));
    y1.domain([0, d3.max(parsedData, function(d) { return d.value; })]).range([y0.rangeBand(), 0]);

    var group = svg.selectAll(".group")
        .data(dataByGroup)
        .enter().append("g")
        .attr("class", "group")
        .attr("transform", function(d) { return "translate(0," + y0(d.key) + ")"; });

    group.append("text")
        .attr("class", "group-label")
        .attr("x", -6)
        .attr("y", function(d) { return y1(d.values[0].value / 2); })
        .attr("dy", ".35em")
        .text(function(d) { return hours[d.key-1]; });

    var rects = group.selectAll("rect")
        .data(function(d) { return d.values; })
        .enter().append("rect")
        .style("fill", function(d) { return colors[d.group-1]; })
        .attr("x", function(d) { return x(d.name); })
        .attr("y", function(d) { return y1(d.value); })
        .attr("width", x.rangeBand())
        .attr("height", function(d) { return y0.rangeBand() - y1(d.value); })
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide);

    group.filter(function(d, i) { return !i; }).append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + y0.rangeBand() + ")")
        .call(xAxis);

    d3.selectAll("input").on("change", change);

    var timeout = setTimeout(function() {
        d3.select("input[value=\"stacked\"]").property("checked", true).each(change);
    }, 2000);

    function change() {
        clearTimeout(timeout);
        if (this.value === "multiples") transitionMultiples();
        else transitionStacked();
    }

    function transitionMultiples() {
        var t = svg.transition().duration(750),
            g = t.selectAll(".group").attr("transform", function(d) { return "translate(0," + y0(d.key) + ")"; });
        g.selectAll("rect").attr("y", function(d) { return y1(d.value); });
        g.select(".group-label").attr("y", function(d) { return y1(d.values[0].value / 2); })
        tip.html(function(d) {
            return "<strong>Number of trips:</strong> <span style='color:white'>" + d.value + "</span>";
        });
    }

    function transitionStacked() {
        var t = svg.transition().duration(750),
            g = t.selectAll(".group").attr("transform", "translate(0," + y0(y0.domain()[0]) + ")");
        g.selectAll("rect").attr("y", function(d) { return y1(d.value + d.valueOffset); });
        g.select(".group-label").attr("y", function(d) { return y1(d.values[0].value / 2 + d.values[0].valueOffset); })
        tip.html(function(d) {
            return "<strong>Number of trips:</strong> <span style='color:white'>" + d.value + "</span>";
        });
    }
}

    </script>
</section>
